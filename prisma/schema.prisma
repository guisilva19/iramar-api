// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Add your models here
model User {
  id        String    @id @default(uuid())
  email     String    @unique
  name      String?
  password  String
  role      Role      @default(ADMIN)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Client {
  id        String    @id @default(uuid())
  name      String
  phone     String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  orders    Order[]
  addresses Address[]
  cart      Cart?
}

model Product {
  id          String         @id @default(uuid())
  name        String
  description String
  price       Float
  image       String?
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  category    Category?      @relation(fields: [categoryId], references: [id])
  categoryId  String?
  orderItems  OrderItem[]
  cartItems   CartItem[]
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  image       String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Order {
  id            String        @id @default(uuid())
  client        Client        @relation(fields: [clientId], references: [id])
  clientId      String
  status        OrderStatus   @default(PENDENTE)
  total         Float
  items         OrderItem[]
  address       Address       @relation(fields: [addressId], references: [id])
  addressId     String
  paymentMethod PaymentMethod
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model OrderItem {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
}

model Cart {
  id        String     @id @default(uuid())
  client    Client     @relation(fields: [clientId], references: [id])
  clientId  String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String  @id @default(uuid())
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
}

model Address {
  id           String   @id @default(uuid())
  client       Client   @relation(fields: [clientId], references: [id])
  clientId     String
  street       String?
  number       String?
  complement   String?
  neighborhood String?
  lat          Float?
  lng          Float?
  orders       Order[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum Role {
  ADMIN
}

enum OrderStatus {
  PENDENTE
  EM_ANDAMENTO
  ENVIADO
  ENTREGUE
  CANCELADO
}

enum PaymentMethod {
  CARTAO
  PIX
  DINHEIRO
}
